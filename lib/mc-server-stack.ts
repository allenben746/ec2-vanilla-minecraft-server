import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';

export class MinecraftServerStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const vpc = new ec2.Vpc(this, 'MinecraftVPC', {
      maxAzs: 2,
    });

    const securityGroup = new ec2.SecurityGroup(this, 'MinecraftSecurityGroup', {
      vpc,
      description: 'Allow Minecraft traffic',
      allowAllOutbound: true,
    });

    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(25565), 'Allow Minecraft TCP traffic');
    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'Allow SSH access');

    const ebsVolume = new ec2.CfnVolume(this, 'MinecraftWorldDataStorage', {
      availabilityZone: 'us-west-2a',
      size: 10,
      volumeType: 'gp2',
    });

    const ec2Instance = new ec2.Instance(this, 'MinecraftServerInstance', {
      vpc,
      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.SMALL),
      machineImage: ec2.MachineImage.latestAmazonLinux(),
      vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },
      keyName: 'minecraft-server-key',
      securityGroup,
    });

    new ec2.CfnVolumeAttachment(this, 'MinecraftWorldDataStorageAttachment', {
      volumeId: ebsVolume.ref,
      instanceId: ec2Instance.instanceId,
      device: '/dev/sdf',
    });

    const elasticIP = new ec2.CfnEIP(this, 'ElasticIP', {
      domain: 'vpc',
    });

    new ec2.CfnEIPAssociation(this, 'EIPAssociation', {
      eip: elasticIP.ref,
      instanceId: ec2Instance.instanceId,
    });

    ec2Instance.addUserData(
      `
      #!/bin/bash
      set -e

      # Update the system and install Java 21
      sudo yum update -y
      sudo yum install -y java-21-amazon-corretto-devel

      # Ensure world directory exists
      sudo mkdir -p /home/ec2-user/minecraft/world

      # Mount the EBS volume directly to the Minecraft world directory
      if ! mount | grep /home/ec2-user/minecraft/world; then
        sudo mount /dev/xvdf /home/ec2-user/minecraft/world
      fi

      # Set permissions for ec2-user on the world directory
      sudo chown -R ec2-user:ec2-user /home/ec2-user/minecraft/world
      sudo chmod -R 755 /home/ec2-user/minecraft/world

      # Move into the ec2-user's home directory and download the Minecraft server jar
      cd /home/ec2-user/minecraft
      if [ ! -f server.jar ]; then
        curl -o server.jar https://piston-data.mojang.com/v1/objects/59353fb40c36d304f2035d51e7d6e6baa98dc05c/server.jar
      fi

      # Create the server.properties file
      cat <<EOL > /home/ec2-user/minecraft/server.properties
      #Minecraft server properties
      #Generated by UserData script
      level-name=world
      motd=Welcome to your Minecraft server!
      difficulty=normal
      enable-command-block=false
      gamemode=survival
      max-players=20
      online-mode=true
      pvp=true
      view-distance=10
      EOL

      # Accept the Minecraft EULA
      echo 'eula=true' > /home/ec2-user/minecraft/eula.txt

      # Remove the session.lock file if it exists to avoid lock issues
      sudo rm -f world/session.lock

      # Start the Minecraft server in the background and log output to a file
      java -Xmx1024M -Xms1024M -jar server.jar nogui &
      `
    );

    ec2Instance.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonSSMManagedInstanceCore"));
  }
}
